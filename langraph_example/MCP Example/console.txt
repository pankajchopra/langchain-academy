C:; cd 'C:\Users\panka\projects\langchain-academy\langchain-academy/langraph_example/MCP Example'; & 'c:\Users\panka\projects\langchain-academy\langchain-academy\lc-academy-env\Scripts\python.exe' 'c:\Users\panka\.vscode\extensions\ms-python.debugpy-2025.10.0-win32-x64\bundled\libs\debugpy\launcher' '54048' '--' 'C:\Users\panka\projects\langchain-academy\langchain-academy/langraph_example/MCP Example/main.py' 
üöÄ Starting Fully Async LangGraph MCP Integration Demo...

üìã Section 1: Setting up ASYNC LOCAL TOOLS...
‚úÖ Created 2 async local tools: ['calculate_fibonacci', 'format_text_stylish']

üîå Section 2: Setting up ASYNC MCP SERVER MANAGEMENT...

üîå Section 3: Setting up ASYNC MCP CLIENT...
üöÄ Starting fully async demonstration...

================================================================================
üéØ FULLY ASYNC LANGGRAPH MCP INTEGRATION DEMONSTRATION
================================================================================
‚úÖ Resource monitoring started

üîß Section 4: Creating ASYNC UNIFIED TOOLSET...
üîÑ Not found production MCP client so creating a new development
üöÄ Starting MCP servers...
   Found stdio-math-mcp-server.py, starting HTTP server...
   Found streamable-http-weather-mcp-server.py, starting HTTP server...
   Waiting for MCP servers to initialize...

üìä System Resources:
   CPU Usage: 37.9%
   Memory: 52.2% (16.6GB)
   Disk: 90.9% (432.2GB)
üîß Starting stdio server: math_server
üåê Starting HTTP server: weather_server on port 8000
HTTP server task completed: <Task pending name='Task-6' coro=<AsyncMCPServerManager.start_http_server.<locals>.run_server() running at C:\Users\panka\projects\langchain-academy\langchain-academy/langraph_example/MCP Example/main.py:130> wait_for=<Future pending cb=[Task.task_wakeup()]>>
‚úÖ Started stdio server math_server with PID: 12900
‚úÖ Started HTTP server weather_server on port 8000

üìä System Resources:
   CPU Usage: 30.8%
   Memory: 52.5% (16.7GB)
   Disk: 90.9% (432.2GB)
üì° Initializing MultiServerMCPClient...
   - math_server: stdio transport (local subprocess)
   - weather_server: streamable_http transport (remote HTTP)
üîç Fetching tools from MCP servers...
c:\Users\panka\.vscode\extensions\ms-python.debugpy-2025.10.0-win32-x64\bundled\libs\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_suspended_frames.py:429: RuntimeWarning: coroutine 'MultiServerMCPClient.get_tools' was never awaited
  self._variable_reference_to_variable.clear()
Object allocated at (most recent call last):
  File "<string>", lineno 1

üìä System Resources:
   CPU Usage: 22.1%
   Memory: 52.6% (16.7GB)
   Disk: 90.9% (432.2GB)
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Received session ID: 02bde5bf808f456493d536578df57bd7
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-06-18
INFO:httpx:HTTP Request: GET http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: DELETE http://localhost:8000/mcp "HTTP/1.1 200 OK"

üìä System Resources:
   CPU Usage: 37.4%
   Memory: 52.8% (16.8GB)
   Disk: 90.9% (432.2GB)

üìä System Resources:
   CPU Usage: 60.8%
   Memory: 53.0% (16.9GB)
   Disk: 90.9% (432.2GB)
   Raw MCP tools response: [StructuredTool(name='add', description='Add two numbers together and return the result asynchronously.', args_schema={'properties': {'a': {'title': 'A', 'type': 'integer'}, 'b': {'title': 'B', 'type': 'integer'}}, 'required': ['a', 'b'], 'title': 'addArguments', 'type': 'object'}, response_format='content_and_artifact', coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x000002AC41D4AE80>), StructuredTool(name='multiply', description='Multiply two numbers together and return the result asynchronously.', args_schema={'properties': {'a': {'title': 'A', 'type': 'integer'}, 'b': {'title': 'B', 'type': 'integer'}}, 'required': ['a', 'b'], 'title': 'multiplyArguments', 'type': 'object'}, response_format='content_and_artifact', coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x000002AC41D70B80>), StructuredTool(name='subtract', description='Subtract second number from first number and return the result asynchronously.', args_schema={'properties': {'a': {'title': 'A', 'type': 'integer'}, 'b': {'title': 'B', 'type': 'integer'}}, 'required': ['a', 'b'], 'title': 'subtractArguments', 'type': 'object'}, response_format='content_and_artifact', coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x000002AC41D71E40>), StructuredTool(name='divide', description='Divide first number by second number and return the result asynchronously.', args_schema={'properties': {'a': {'title': 'A', 'type': 'integer'}, 'b': {'title': 'B', 'type': 'integer'}}, 'required': ['a', 'b'], 'title': 'divideArguments', 'type': 'object'}, response_format='content_and_artifact', coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x000002AC41D707C0>), StructuredTool(name='power', description='Calculate a to the power of b asynchronously.', args_schema={'properties': {'a': {'title': 'A', 'type': 'integer'}, 'b': {'title': 'B', 'type': 'integer'}}, 'required': ['a', 'b'], 'title': 'powerArguments', 'type': 'object'}, response_format='content_and_artifact', coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x000002AC41D71B20>), StructuredTool(name='get_weather', description='Get current weather information for the specified location asynchronously.', args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'get_weatherArguments', 'type': 'object'}, response_format='content_and_artifact', coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x000002AC3A18A480>), StructuredTool(name='get_forecast', description='Get weather forecast for the specified location over the next few days asynchronously.', args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}, 'days': {'default': 3, 'title': 'Days', 'type': 'integer'}}, 'required': ['location'], 'title': 'get_forecastArguments', 'type': 'object'}, response_format='content_and_artifact', coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x000002AC41D72C00>), StructuredTool(name='get_weather_alerts', description='Get weather alerts and warnings for the specified location asynchronously.', args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'get_weather_alertsArguments', 'type': 'object'}, response_format='content_and_artifact', coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x000002AC41D73600>), StructuredTool(name='get_air_quality', description='Get air quality index information for the specified location asynchronously.', args_schema={'properties': {'location': {'title': 'Location', 'type': 'string'}}, 'required': ['location'], 'title': 'get_air_qualityArguments', 'type': 'object'}, response_format='content_and_artifact', coroutine=<function convert_mcp_tool_to_langchain_tool.<locals>.call_tool at 0x000002AC41D73060>)]
c:\Users\panka\.vscode\extensions\ms-python.debugpy-2025.10.0-win32-x64\bundled\libs\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_suspended_frames.py:429: RuntimeWarning: coroutine 'MultiServerMCPClient.get_tools' was never awaited
  self._variable_reference_to_variable.clear()
Object allocated at (most recent call last):
  File "<string>", lineno 1
‚úÖ Retrieved 9 tools from MCP servers:
   - add: Add two numbers together and return the result asynchronously.
   - multiply: Multiply two numbers together and return the result asynchronously.
   - subtract: Subtract second number from first number and return the result asynchronously.
   - divide: Divide first number by second number and return the result asynchronously.
   - power: Calculate a to the power of b asynchronously.
   - get_weather: Get current weather information for the specified location asynchronously.
   - get_forecast: Get weather forecast for the specified location over the next few days asynchronously.
   - get_weather_alerts: Get weather alerts and warnings for the specified location asynchronously.     
   - get_air_quality: Get air quality index information for the specified location asynchronously.      

üéØ ASYNC UNIFIED TOOLSET CREATED:
   - Local tools: 2 tools
   - MCP tools: 9 tools
   - Total unified tools: 11 tools

üîç All tools available to the agent:
   1. calculate_fibonacci (LOCAL) - Calculate the nth Fibonacci number using async iterative approach.  
   2. format_text_stylish (LOCAL) - Format text with different styles: bold, italic, underline, or uppercase.
   3. add (MCP) - Add two numbers together and return the result asynchronously.
   4. multiply (MCP) - Multiply two numbers together and return the result asynchronously.
   5. subtract (MCP) - Subtract second number from first number and return the result asynchronously.   
   6. divide (MCP) - Divide first number by second number and return the result asynchronously.
   7. power (MCP) - Calculate a to the power of b asynchronously.
   8. get_weather (MCP) - Get current weather information for the specified location asynchronously.    
   9. get_forecast (MCP) - Get weather forecast for the specified location over the next few days asynchronously.
   10. get_weather_alerts (MCP) - Get weather alerts and warnings for the specified location asynchronously.
   11. get_air_quality (MCP) - Get air quality index information for the specified location asynchronously.
‚è±Ô∏è  Async setup completed in 35.360 seconds

ü§ñ Section 5: Building ASYNC LANGGRAPH AGENT with ToolNode...
üß† Initializing LLM: OpenAI GPT-4.1 Preview...
‚úÖ OPENAI_API_KEY available (last 4 chars: S3oA)
üîó Bound 11 tools to model
‚öôÔ∏è Created async ToolNode for unified tool execution
üìä Building async LangGraph workflow...
‚úÖ Async LangGraph agent compiled successfully!
‚è±Ô∏è  Async agent creation completed in 20.281 seconds

üé™ Section 6: Running ASYNC DEMONSTRATIONS...

============================================================
üß™ ASYNC TEST 1: Async Local Tool Test - Fibonacci
üîç Query: Calculate the 15th Fibonacci number
üéØ Expected tools: calculate_fibonacci
============================================================

üìä System Resources:
   CPU Usage: 22.2%
   Memory: 52.9% (16.8GB)
   Disk: 90.9% (432.2GB)
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
üì§ ASYNC RESPONSE:
   The 15th Fibonacci number is 610.
‚è±Ô∏è  Execution time: 5.438 seconds

üîß Async tool calls made:
   - calculate_fibonacci: {'n': 15}

============================================================
üß™ ASYNC TEST 2: Async Local Tool Test - Text Formatting
üîç Query: Format the text 'Async LangGraph' in bold style
üéØ Expected tools: format_text_stylish
============================================================
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
üì§ ASYNC RESPONSE:
   The text "Async LangGraph" has been formatted in bold style.
‚è±Ô∏è  Execution time: 1.813 seconds

üîß Async tool calls made:
   - format_text_stylish: {'text': 'Async LangGraph', 'style': 'bold'}

üîß Async tool calls made:
   - format_text_stylish: {'text': 'Async LangGraph', 'style': 'bold'}

============================================================
üß™ ASYNC TEST 3: Async MCP Tool Test - Math Operations
üîç Query: What is 25 + 37, then multiply that result by 4?
üéØ Expected tools: add, multiply
============================================================
============================================================

üìä System Resources:
   CPU Usage: 22.9%
   Memory: 52.9% (16.9GB)
   Disk: 90.9% (432.2GB)
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"

üìä System Resources:
   CPU Usage: 21.6%
   Memory: 53.0% (16.9GB)
   Disk: 90.9% (432.2GB)

üìä System Resources:
   CPU Usage: 42.1%
   Memory: 53.1% (16.9GB)
   Disk: 90.9% (432.2GB)
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"

üìä System Resources:
   CPU Usage: 24.6%
   Memory: 53.0% (16.9GB)
   Disk: 90.9% (432.2GB)

üìä System Resources:
   CPU Usage: 54.7%
   Memory: 53.0% (16.9GB)
   Disk: 90.9% (432.2GB)
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
üì§ ASYNC RESPONSE:
   The result of adding 25 and 37 is 62. When you multiply 62 by 4, you get 248.
‚è±Ô∏è  Execution time: 26.328 seconds

üîß Async tool calls made:
   - add: {'a': 25, 'b': 37}
   - multiply: {'a': 62, 'b': 4}

============================================================
üß™ ASYNC TEST 4: Async MCP Tool Test - Weather Query
üîç Query: What's the weather like in Tokyo?
üéØ Expected tools: get_weather
============================================================
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Received session ID: 1ad633ff200a41c5b2c120d2f03094fb
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-06-18
INFO:httpx:HTTP Request: GET http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: DELETE http://localhost:8000/mcp "HTTP/1.1 200 OK"

üìä System Resources:
   CPU Usage: 23.4%
   Memory: 52.8% (16.8GB)
   Disk: 90.9% (432.2GB)
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
üì§ ASYNC RESPONSE:
   The weather in Tokyo is currently partly cloudy with a temperature of 75¬∞F (24¬∞C). The humidity is mild, and there are gentle winds.
‚è±Ô∏è  Execution time: 4.578 seconds

üîß Async tool calls made:
   - get_weather: {'location': 'Tokyo'}

============================================================
üß™ ASYNC TEST 5: Async Mixed Tools Test
üîç Query: Calculate the 12th Fibonacci number, format it in uppercase, and get weather for London       
üéØ Expected tools: multiple tools
============================================================
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:mcp.client.streamable_http:Received session ID: 33dfce1397ce4683ba2c2c96b17fc23d
INFO:mcp.client.streamable_http:Negotiated protocol version: 2025-06-18
INFO:httpx:HTTP Request: GET http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 202 Accepted"
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: DELETE http://localhost:8000/mcp "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"

üìä System Resources:
   CPU Usage: 24.7%
   Memory: 52.8% (16.8GB)
   Disk: 90.9% (432.2GB)
üì§ ASYNC RESPONSE:
   The 12th Fibonacci number is 144.

Formatted in uppercase: **12TH FIBONACCI**

Weather in London: Cloudy, 61¬∞F (16¬∞C), chance of light rain in the afternoon.
‚è±Ô∏è  Execution time: 5.468 seconds

üîß Async tool calls made:
   - calculate_fibonacci: {'n': 12}
   - format_text_stylish: {'text': '12th Fibonacci', 'style': 'uppercase'}
   - get_weather: {'location': 'London'}

================================================================================
üéâ ASYNC DEMONSTRATION COMPLETE!
================================================================================

üìã ASYNC PERFORMANCE METRICS:
   ‚è±Ô∏è  Setup time: 35.360s
   ‚è±Ô∏è  Agent creation: 20.281s
   ‚è±Ô∏è  Demo execution: 46.266s
   ‚è±Ô∏è  Total time: 101.907s

üìã KEY ASYNC TAKEAWAYS:
   ‚úÖ All operations are fully asynchronous
   ‚úÖ Local and MCP tools execute with async parity
   ‚úÖ Server lifecycle managed asynchronously
   ‚úÖ Concurrent execution improves performance
   ‚úÖ Graceful async shutdown handling
   ‚úÖ Non-blocking I/O throughout the pipeline
‚úÖ Resource monitoring stopped

üßπ Starting async cleanup...
üßπ Shutting down all MCP servers...
   Cancelling HTTP server: weather_server
   Terminating stdio server: math_server
   Terminating stdio server: weather_server
‚úÖ All servers shutdown complete
‚úÖ Async cleanup complete
(lc-academy-env) PS C:\Users\panka\projects\langchain-academy\langchain-academy\langraph_example\MCP Example>